# Recipe Cost Calculator Backend Setup

## Project Structure
```
recipe-cost-calculator-backend/
├── db/
│   └── config.js
├── routes/
│   ├── ingredients.js
│   ├── recipes.js
│   └── calculations.js
├── .env
├── package.json
└── server.js
```

## Setup Steps

### 1. Create Project Directory
```bash
mkdir recipe-cost-calculator-backend
cd recipe-cost-calculator-backend
```

### 2. Initialize Project
```bash
npm init -y
```

### 3. Install Dependencies
```bash
npm install express cors pg dotenv express-validator
npm install --save-dev nodemon
```

### 4. Create Directories
```bash
mkdir db routes
```

### 5. Create Database
In PostgreSQL (using pgAdmin or command line):
```sql
CREATE DATABASE recipe_cost_calculator;
CREATE USER recipe_user WITH PASSWORD 'your_password';
GRANT ALL PRIVILEGES ON DATABASE recipe_cost_calculator TO recipe_user;
```

### 6. Run the Database Schema
Execute the SQL schema from the previous artifact to create all tables.

### 7. Create Environment File
Create `.env` file in project root with your database credentials.

### 8. Create All Files
- Copy the server.js code
- Create db/config.js
- Create routes/ingredients.js
- Create routes/recipes.js  
- Create routes/calculations.js

### 9. Start Development Server
```bash
npm run dev
```

## API Endpoints

### Ingredients
- `GET /api/ingredients` - Get all ingredients
- `GET /api/ingredients/:id` - Get single ingredient
- `POST /api/ingredients` - Create ingredient
- `PUT /api/ingredients/:id` - Update ingredient
- `DELETE /api/ingredients/:id` - Delete ingredient

### Recipes
- `GET /api/recipes` - Get all recipes
- `GET /api/recipes/:id` - Get single recipe with details
- `POST /api/recipes` - Create recipe
- `PUT /api/recipes/:id` - Update